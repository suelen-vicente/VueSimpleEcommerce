{
	"info": {
		"_postman_id": "01f7e43e-553f-4f17-81e6-299879f7cba8",
		"name": "Comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20057135"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "CreateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User creation was successful\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"USER NAME CREATE\",\n    \"email\": \"user@test.com\",\n    \"password\": \"test\",\n    \"shipping_address\": \"108 University Avenue, Waterloo, ON, Canada\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_url}}/create.php",
							"host": [
								"{{user_url}}"
							],
							"path": [
								"create.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUser2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User creation was successful\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"USER NAME CREATE 2\",\n    \"email\": \"user2@test.com\",\n    \"password\": \"test2\",\n    \"shipping_address\": \"108 University Avenue, Waterloo, ON, Canada\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_url}}/create.php",
							"host": [
								"{{user_url}}"
							],
							"path": [
								"create.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateProduct 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Product creation was successful\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"PRODUCT NAME CREATE\",\n    \"description\": \"This is an incredible test!\",\n    \"image\": \"test_product.jpeg\",\n    \"price\": 500,\n    \"shipping_cost\": 10,\n    \"brand\": \"Test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{product_url}}/create.php",
							"host": [
								"{{product_url}}"
							],
							"path": [
								"create.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateProduct 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Product creation was successful\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"PRODUCT NAME CREATE\",\n    \"description\": \"This is an incredible test!\",\n    \"image\": \"test_product.jpeg\",\n    \"price\": 500,\n    \"shipping_cost\": 10,\n    \"brand\": \"Test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{product_url}}/create.php",
							"host": [
								"{{product_url}}"
							],
							"path": [
								"create.php"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CreateCommentProduct1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Comment creation was successful\", function () {",
							"  var jsonData = pm.response.json();",
							"  pm.environment.set(\"comment_id\", jsonData._id);",
							"  pm.expect(pm.response.code).to.equal(201);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"productId\": \"{{product_id}}\",\n    \"userId\": \"{{user_id}}\",\n    \"rating\":  3,\n    \"image\": \"test.png\",\n    \"text\": \"Great product.\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{comments_url}}",
					"host": [
						"{{comments_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateCommentProduct2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Comment creation was successful\", function () {",
							"  pm.expect(pm.response.code).to.equal(201);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"productId\": \"{{product2_id}}\",\n    \"userId\": \"{{user_id}}\",\n    \"rating\":  5,\n    \"image\": \"test2.png\",\n    \"text\": \"Great product 2.\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{comments_url}}",
					"host": [
						"{{comments_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateCommentProduct1User2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Comment creation was successful\", function () {",
							"  pm.expect(pm.response.code).to.equal(201);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"productId\": \"{{product_id}}\",\n    \"userId\": \"{{user2_id}}\",\n    \"rating\":  3,\n    \"image\": \"test3.png\",\n    \"text\": \"Great product 3.\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{comments_url}}",
					"host": [
						"{{comments_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "ReadComments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check that it returns an array\", function () {",
							"  var jsonData = pm.response.json()[\"body\"];",
							"  pm.expect(jsonData).to.be.an(\"array\");",
							"});",
							"",
							"pm.test(\"Check that itemCount is correct\", function () {",
							"  var itemCount = pm.response.json()[\"itemCount\"];",
							"  var jsonData = pm.response.json()[\"body\"];",
							"  pm.environment.set(\"comment_id\", jsonData[0].id);",
							"  pm.expect(jsonData.length).to.equal(itemCount);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{comments_url}}/read.php",
					"host": [
						"{{comments_url}}"
					],
					"path": [
						"read.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "ReadCommentsByUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check that it returns an array\", function () {",
							"  var jsonData = pm.response.json()[\"comments\"];",
							"  pm.expect(jsonData).to.be.an(\"array\");",
							"});",
							"",
							"pm.test(\"Check that itemCount is correct\", function () {",
							"  var itemCount = pm.response.json()[\"itemCount\"];",
							"  var jsonData = pm.response.json()[\"comments\"];",
							"  pm.expect(jsonData.length).to.equal(itemCount);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{comments_url}}/read-user.php/?user={{user_id}}",
					"host": [
						"{{comments_url}}"
					],
					"path": [
						"read-user.php",
						""
					],
					"query": [
						{
							"key": "user",
							"value": "{{user_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ReadCommentsByProduct",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check that it returns an array\", function () {",
							"  var jsonData = pm.response.json()[\"comments\"];",
							"  pm.expect(jsonData).to.be.an(\"array\");",
							"});",
							"",
							"pm.test(\"Check that itemCount is correct\", function () {",
							"  var itemCount = pm.response.json()[\"itemCount\"];",
							"  var jsonData = pm.response.json()[\"comments\"];",
							"  pm.expect(jsonData.length).to.equal(itemCount);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{comments_url}}/read-product.php/?product={{product_id}}",
					"host": [
						"{{comments_url}}"
					],
					"path": [
						"read-product.php",
						""
					],
					"query": [
						{
							"key": "product",
							"value": "{{product_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ReadCommentById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check that id returned is correct\", function () {",
							"  var jsonData = pm.response.json();",
							"  pm.expect(jsonData._id).to.equal(pm.environment.get(\"comment_id\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{comments_url}}/{{comment_id}}",
					"host": [
						"{{comments_url}}"
					],
					"path": [
						"{{comment_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateComment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User updated successfully\", function () {",
							"  pm.expect(pm.response.code).to.be.equal(200);",
							"});",
							"",
							"pm.test(\"Check that id returned is correct\", function () {",
							"  var jsonData = pm.response.json();",
							"  pm.expect(jsonData._id).to.equal(pm.environment.get(\"comment_id\"));",
							"});",
							"",
							"pm.test(\"Check that comment was updated correctly\", function () {",
							"  var jsonData = pm.response.json();",
							"  pm.expect(jsonData.rating).to.equal(parseInt(pm.environment.get(\"comment_rating_update\")));",
							"  pm.expect(jsonData.image).to.equal(pm.environment.get(\"comment_image_update\"));",
							"  pm.expect(jsonData.text).to.equal(pm.environment.get(\"comment_text_update\"));",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"{{comment_id}}\",\n    \"rating\":  {{comment_rating_update}},\n    \"image\": \"{{comment_image_update}}\",\n    \"text\": \"{{comment_text_update}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{comments_url}}/edit",
					"host": [
						"{{comments_url}}"
					],
					"path": [
						"edit"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteCommentById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{comments_url}}/{{comment_id}}",
					"host": [
						"{{comments_url}}"
					],
					"path": [
						"{{comment_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteCommentByUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{comments_url}}/delete-user.php/?user={{user_id}}",
					"host": [
						"{{comments_url}}"
					],
					"path": [
						"delete-user.php",
						""
					],
					"query": [
						{
							"key": "user",
							"value": "{{user_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteCommentByProduct",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{comments_url}}/delete-product.php/?product={{product_id}}",
					"host": [
						"{{comments_url}}"
					],
					"path": [
						"delete-product.php",
						""
					],
					"query": [
						{
							"key": "product",
							"value": "{{product_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ReadCommentsAfterDelete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request returns status code of 404\", function () {",
							"  pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{comments_url}}/read-product.php/?product={{product_id}}",
					"host": [
						"{{comments_url}}"
					],
					"path": [
						"read-product.php",
						""
					],
					"query": [
						{
							"key": "product",
							"value": "{{product_id}}"
						}
					]
				}
			},
			"response": []
		}
	]
}