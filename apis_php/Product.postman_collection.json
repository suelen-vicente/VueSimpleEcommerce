{
	"info": {
		"_postman_id": "b632929d-6c4d-4bec-b4aa-59b5b1514669",
		"name": "Product",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20057135"
	},
	"item": [
		{
			"name": "CreateProduct",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Product creation was successful\", function () {",
							"  pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"PRODUCT NAME CREATE\",\n    \"description\": \"This is an incredible test!\",\n    \"image\": \"test_product.jpeg\",\n    \"price\": 500,\n    \"shipping_cost\": 10,\n    \"brand\": \"Test\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{product_url}}/create.php",
					"host": [
						"{{product_url}}"
					],
					"path": [
						"create.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "ReadProducts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check that it returns an array\", function () {",
							"  var jsonData = pm.response.json()[\"body\"];",
							"  pm.expect(jsonData).to.be.an(\"array\");",
							"});",
							"",
							"pm.test(\"Check that itemCount is correct\", function () {",
							"  var itemCount = pm.response.json()[\"itemCount\"];",
							"  var jsonData = pm.response.json()[\"body\"];",
							"  pm.environment.set(\"product_id\", jsonData[0].id);",
							"  pm.expect(jsonData.length).to.equal(itemCount);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{product_url}}/read.php",
					"host": [
						"{{product_url}}"
					],
					"path": [
						"read.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "ReadProductById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check that it returns an array\", function () {",
							"  var jsonData = pm.response.json()[\"body\"];",
							"  pm.expect(jsonData).to.be.an(\"array\");",
							"});",
							"",
							"pm.test(\"Check that itemCount is correct\", function () {",
							"  var itemCount = pm.response.json()[\"itemCount\"];",
							"  var jsonData = pm.response.json()[\"body\"];",
							"  pm.expect(jsonData.length).to.equal(itemCount);",
							"});",
							"",
							"pm.test(\"Check that id returned is correct\", function () {",
							"  var jsonData = pm.response.json()[\"body\"];",
							"  pm.expect(parseInt(jsonData[0].id)).to.equal(pm.environment.get(\"product_id\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{product_url}}/read.php/?id={{product_id}}",
					"host": [
						"{{product_url}}"
					],
					"path": [
						"read.php",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{product_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateProduct",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Product creation was successful\", function () {",
							"    console.log(pm.environment.get(\"product_name\"));",
							"  pm.expect(pm.response.code).to.be.equal(200);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"PRODUCT NAME UPDATE\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{product_url}}/update.php/?id={{product_id}}",
					"host": [
						"{{product_url}}"
					],
					"path": [
						"update.php",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{product_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ReadProductByIdAfterUpdate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check that it returns an array\", function () {",
							"  var jsonData = pm.response.json()[\"body\"];",
							"  pm.expect(jsonData).to.be.an(\"array\");",
							"});",
							"",
							"pm.test(\"Check that itemCount is correct\", function () {",
							"  var itemCount = pm.response.json()[\"itemCount\"];",
							"  var jsonData = pm.response.json()[\"body\"];",
							"  pm.expect(jsonData.length).to.equal(itemCount);",
							"});",
							"",
							"pm.test(\"Check that id returned is correct\", function () {",
							"  var jsonData = pm.response.json()[\"body\"];",
							"  pm.expect(parseInt(jsonData[0].id)).to.equal(pm.environment.get(\"product_id\"));",
							"});",
							"",
							"pm.test(\"Check that name was updated correctly\", function () {",
							"  var jsonData = pm.response.json()[\"body\"];",
							"  pm.expect(jsonData[0].name).to.equal(pm.environment.get(\"product_name_update\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{product_url}}/read.php/?id={{product_id}}",
					"host": [
						"{{product_url}}"
					],
					"path": [
						"read.php",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{product_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteProduct",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{product_url}}/delete.php/?id={{product_id}}",
					"host": [
						"{{product_url}}"
					],
					"path": [
						"delete.php",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{product_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ReadProductByIdAfterDelete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check if Not Found Code is returned\", function () {",
							"  pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Check if No record found is returned\", function () {",
							"  var jsonData = pm.response.json()[\"message\"];",
							"  pm.expect(jsonData).to.equal(\"No record found.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{product_url}}/read.php/?id={{product_id}}",
					"host": [
						"{{product_url}}"
					],
					"path": [
						"read.php",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{product_id}}"
						}
					]
				}
			},
			"response": []
		}
	]
}